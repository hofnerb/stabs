
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("stabs")
Loading required package: parallel
> attach(asNamespace("stabs"))
The following objects are masked from package:stabs:

    check_folds, glmnet.lasso, glmnet.lasso_maxCoef, lars.lasso,
    lars.stepwise, parameters, plot.stabsel, print.stabsel,
    print.stabsel_parameters, run_stabsel, selected, selected.stabsel,
    stabsel, stabsel.data.frame, stabsel.matrix, stabsel.stabsel,
    stabsel_parameters, stabsel_parameters.default,
    stabsel_parameters.stabsel, subsample

The following object is masked from package:stats:

    D

> 
> set.seed(1907)
> 
> ### (Slightly) modified version of the code accompanying the paper:
> ###   Shah, R. D. and Samworth, R. J. (2013), Variable selection with error
> ###   control: Another look at Stability Selection, J. Roy. Statist. Soc., Ser.
> ###   B, 75, 55-80. DOI: 10.1111/j.1467-9868.2011.01034.x
> ###
> ### Original code available from
> ###   http://www.statslab.cam.ac.uk/~rds37/papers/r_concave_tail.R
> ### or
> ###   http://www.statslab.cam.ac.uk/~rjs57/r_concave_tail.R
> r.TailProbs <- function(eta, B, r) {
+     ## If pi = ceil{ B * 2 * eta} / B + 1/B,..., 1 return the tail probability.
+     ## If pi < ceil{ B * 2 * eta} / B return 1
+ 
+     MAXa <- 100000
+     MINa <- 0.00001
+ 
+     s <- -1/r
+     etaB <- eta * B
+     k_start <- (ceiling(2 * etaB) + 1)
+     output <- rep(1, B)
+     if (k_start > B)
+         return(output)
+ 
+     a_vec <- rep(MAXa,B)
+ 
+     Find.a <- function(prev_a)
+         uniroot(Calc.a, lower = MINa, upper = prev_a,
+                 tol = .Machine$double.eps^0.75)$root
+ 
+     Calc.a <- function(a) {
+         denom <- sum((a + 0:k)^(-s))
+         num <- sum((0:k) * (a + 0:k)^(-s))
+         num / denom - etaB
+     }
+ 
+     for(k in k_start:B)
+         a_vec[k] <- Find.a(a_vec[k-1])
+ 
+     # NB this function makes use of several gloabl variables
+     OptimInt <- function(a) {
+         num <- (k + 1 - etaB) * sum((a + 0:(t-1))^(-s))
+         denom <- sum((k + 1 - (0:k)) * (a + 0:k)^(-s))
+         1 - num / denom
+     }
+ 
+     prev_k <- k_start
+     for(t in k_start:B) {
+         cur_optim <- rep(0, B)
+         cur_optim[B] <- OptimInt(a_vec[B])
+         if (prev_k <= (B-1)) {
+             for (k in prev_k:(B-1))
+                 cur_optim[k] <- optimize(f=OptimInt, lower = a_vec[k+1],
+                                          upper = a_vec[k], maximum  = TRUE)$objective
+         }
+         output[t] <- max(cur_optim)
+         prev_k <- which.max(cur_optim)
+     }
+     return(output)
+ }
> 
> pminD <- function(theta, B, r = c(-1/2, -1/4)) {
+     pmin(c(rep(1, B), r.TailProbs(theta^2, B, r[1])),
+          r.TailProbs(theta, 2*B, r[2]))
+ }
> 
> ## test r-concave bound
> B <- 50
> x <- (1:(2 * B))/(2 * B)
> p <- 1000
> q <- 50
> theta <- q/p
> if (FALSE) {
+     plot(x, log(pminD(theta, B)), xlab = "pi")
+     abline(v = ceiling(2 * theta * 100) / 100)
+     Ds <- cbind(c(rep(1, B), r.TailProbs(theta^2, B, -1/2)),
+                 r.TailProbs(theta, 2*B, -1/4))
+     round(log(Ds), 2)
+     lines(x, log(Ds[,1]), col = "red", lwd = 2)
+     lines(x, log(Ds[,2]), col = "blue", lwd = 2)
+ }
> 
> ## r-concave bound of Shah & Samworth (2013)
> bound_ss <- (pminD(theta, B) * p)[40:100]
> plot(x[40:100], bound_ss, xlab = "pi", ylim = c(0, 50))
> ## Bound of Meinshausen & Buehlmann (2010)
> points(x[40:100], q^2 / (2 * x[40:100] - 1) / p, col = "red")
> ## now our implementation
> bound <- rep(NA, 61)
> for (i in 40:100) {
+     bound[i - 39] <- minD(q, p, i/100, B) * p
+ }
> points((40:100)/100, bound, col = "green")
> stopifnot(all((bound - bound_ss) < sqrt(.Machine$double.eps)))
> 
> ## test r-concave bound
> B <- 50
> x <- (1:(2 * B))/(2 * B)
> p <- 1000
> q <- 490
> theta <- q/p
> 
> ## r-concave bound of Shah & Samworth (2013)
> bound_ss <- (pminD(theta, B) * p)[40:100]
> plot(x[40:100], bound_ss, xlab = "pi")
> ## Bound of Meinshausen & Buehlmann (2010)
> points(x[40:100], q^2 / (2 * x[40:100] - 1) / p, col = "red")
> ## now our implementation
> bound <- rep(NA, 61)
> for (i in 40:100) {
+     bound[i - 39] <- minD(q, p, i/100, B) * p
+ }
> points((40:100)/100, bound, col = "green")
> stopifnot(all((bound - bound_ss) < sqrt(.Machine$double.eps)))
> 
> ### computation of q from other values
> cutoff <- 0.6
> PFER <- 0.2
> B <- 50
> p <- 200
> (q <- optimal_q(p = p, cutoff = cutoff, PFER = PFER, B = B,
+                 assumption = "r-concave"))
[1] 6
> # check:
> (a <- round(minD(q, p, cutoff, B) * p, 3))
[1] 0.174
> (b <- round(minD(q + 1, p, cutoff, B) * p, 3))
[1] 0.248
> stopifnot(a < PFER && b > PFER)
> 
> ## same for unimodal bound
> (q <- optimal_q(p = p, cutoff = cutoff, PFER = PFER, B = B,
+                 assumption = "unimodal"))
[1] 3
> 
> ### computation of cutoff from other values
> PFER <- 0.2
> B <- 50
> p <- 200
> q <- 7
> (cutoff <- optimal_cutoff(p = p, q = q, PFER = PFER, B = B,
+                           assumption = "r-concave"))
[1] 0.62
> # check:
> (a <- round(minD(q, p, cutoff, B) * p, 3))
[1] 0.196
> (b <- round(minD(q, p, cutoff - 1e-2, B) * p, 3))
[1] 0.219
> stopifnot(a < PFER && b > PFER)
> 
> ## same for unimodal bound
> (cutoff <- optimal_cutoff(p = p, q = q, PFER = PFER, B = B,
+                           assumption = "unimodal"))
[1] 0.81
> 
> ### check stabsel interface
> if (require("mboost") && require("TH.data")) {
+     data("bodyfat", package = "TH.data")
+     mod <- glmboost(DEXfat ~ ., data = bodyfat)
+     print(sbody <- stabsel(mod, q = 3, PFER = 0.2, sampling.type = "MB"))
+     dim(sbody$phat)
+     print(sbody <- stabsel(mod, q = 3, PFER = 0.2, sampling.type = "SS"))
+     dim(sbody$phat)
+ 
+     ## check interface of stabsel_parameters
+     stabsel(mod, q = 3, PFER = 0.2, sampling.type = "SS", eval = FALSE)
+ }
Loading required package: mboost
Loading required package: TH.data
Loading required package: survival
Loading required package: MASS

Attaching package: 'TH.data'

The following object is masked from 'package:MASS':

    geyser

	Stability Selection without further assumptions

No variables selected

Selection probabilities:
 (Intercept)          age elbowbreadth  kneebreadth     anthro3c     anthro3b 
        0.00         0.00         0.00         0.02         0.12         0.13 
     anthro4     anthro3a    waistcirc      hipcirc 
        0.19         0.61         0.95         0.98 

---
Cutoff: 1; q: 3; PFER:  0.9 
PFER corresponds to signif. level 0.09 (without multiplicity adjustment)

	Stability Selection with unimodality assumption

Selected variables:
waistcirc   hipcirc 
        3         4 

Selection probabilities:
 (Intercept)          age elbowbreadth  kneebreadth     anthro3c     anthro3b 
        0.00         0.00         0.00         0.05         0.12         0.13 
     anthro4     anthro3a    waistcirc      hipcirc 
        0.16         0.59         0.96         0.99 

---
Cutoff: 0.96; q: 3; PFER (*):  0.176 
   (*) or expected number of low selection probability variables
PFER corresponds to signif. level 0.0176 (without multiplicity adjustment)

Stability selection with unimodality assumption

Cutoff: 0.96; q: 3; PFER (*):  0.176 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.2 
PFER corresponds to signif. level 0.0176 (without multiplicity adjustment)
Warning message:
In stabsel_parameters.default(p = p, cutoff = cutoff, q = q, PFER = PFER,  :
  Upper bound for PFER > 0.2 for the given value of 'q' (true upper bound = 0.9)
> 
> ## check stabsel_parameters and (theoretical) error control
> cutoff <- 0.6
> for (i in 1:10) {
+     print(stabsel_parameters(cutoff = cutoff, q = i, p = 100, sampling.type = "MB"))
+ }
Stability selection without further assumptions

Cutoff: 0.6; q: 1; PFER:  0.05 
PFER (specified upper bound):  0.05 
PFER corresponds to signif. level 5e-04 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 2; PFER:  0.2 
PFER (specified upper bound):  0.2 
PFER corresponds to signif. level 0.002 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 3; PFER:  0.45 
PFER (specified upper bound):  0.45 
PFER corresponds to signif. level 0.0045 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 4; PFER:  0.8 
PFER (specified upper bound):  0.8 
PFER corresponds to signif. level 0.008 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 5; PFER:  1.25 
PFER (specified upper bound):  1.25 
PFER corresponds to signif. level 0.0125 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 6; PFER:  1.8 
PFER (specified upper bound):  1.8 
PFER corresponds to signif. level 0.018 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 7; PFER:  2.45 
PFER (specified upper bound):  2.45 
PFER corresponds to signif. level 0.0245 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 8; PFER:  3.2 
PFER (specified upper bound):  3.2 
PFER corresponds to signif. level 0.032 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 9; PFER:  4.05 
PFER (specified upper bound):  4.05 
PFER corresponds to signif. level 0.0405 (without multiplicity adjustment)
Stability selection without further assumptions

Cutoff: 0.6; q: 10; PFER:  5 
PFER (specified upper bound):  5 
PFER corresponds to signif. level 0.05 (without multiplicity adjustment)
> for (i in 1:10) {
+     print(stabsel_parameters(cutoff = cutoff, q = i, p = 100, sampling.type = "SS",
+                              assumption = "unimodal"))
+     print(stabsel_parameters(cutoff = cutoff, q = i, p = 100, sampling.type = "SS",
+                              assumption = "r-concave"))
+ }
Stability selection with unimodality assumption

Cutoff: 0.6; q: 1; PFER (*):  0.0263 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.02631579 
PFER corresponds to signif. level 0.000263 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 1; PFER (*):  0.00697 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.006971364 
PFER corresponds to signif. level 6.97e-05 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 2; PFER (*):  0.105 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.1052632 
PFER corresponds to signif. level 0.00105 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 2; PFER (*):  0.0334 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.03342845 
PFER corresponds to signif. level 0.000334 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 3; PFER (*):  0.237 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.2368421 
PFER corresponds to signif. level 0.00237 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 3; PFER (*):  0.0869 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.08691176 
PFER corresponds to signif. level 0.000869 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 4; PFER (*):  0.421 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.4210526 
PFER corresponds to signif. level 0.00421 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 4; PFER (*):  0.164 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.1637231 
PFER corresponds to signif. level 0.00164 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 5; PFER (*):  0.658 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.6578947 
PFER corresponds to signif. level 0.00658 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 5; PFER (*):  0.261 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.2605329 
PFER corresponds to signif. level 0.00261 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 6; PFER (*):  0.947 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.9473684 
PFER corresponds to signif. level 0.00947 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 6; PFER (*):  0.382 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.3820466 
PFER corresponds to signif. level 0.00382 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 7; PFER (*):  1.29 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1.289474 
PFER corresponds to signif. level 0.0129 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 7; PFER (*):  0.53 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.5295188 
PFER corresponds to signif. level 0.0053 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 8; PFER (*):  1.68 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1.684211 
PFER corresponds to signif. level 0.0168 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 8; PFER (*):  0.704 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.7042719 
PFER corresponds to signif. level 0.00704 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 9; PFER (*):  2.13 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  2.131579 
PFER corresponds to signif. level 0.0213 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 9; PFER (*):  0.908 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.9077127 
PFER corresponds to signif. level 0.00908 (without multiplicity adjustment)
Stability selection with unimodality assumption

Cutoff: 0.6; q: 10; PFER (*):  2.63 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  2.631579 
PFER corresponds to signif. level 0.0263 (without multiplicity adjustment)
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 10; PFER (*):  1.14 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1.141338 
PFER corresponds to signif. level 0.0114 (without multiplicity adjustment)
> 
> ## check if missing values are determined correctly (especially at the extreme values)
> p <- 100
> B <- 50
> cutoff <- 0.6
> # low PFER
> PFER <- 0.001
> (res <- stabsel_parameters(p = p, cutoff = cutoff, PFER = PFER, B = B,
+                            sampling.type = "SS", assumption = "r-concave"))
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 1; PFER (*):  0.00697 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.001 
PFER corresponds to signif. level 6.97e-05 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = cutoff, q = res$q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 1; PFER (*):  0.00697 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.006971364 
PFER corresponds to signif. level 6.97e-05 (without multiplicity adjustment)
> # high PFER
> PFER <- 50
> (res <- stabsel_parameters(p = p, cutoff = cutoff, PFER = PFER, B = B,
+                            sampling.type = "SS", assumption = "r-concave"))
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 30; PFER (*):  16.2 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  50 
PFER corresponds to signif. level 0.162 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = cutoff, q = res$q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 30; PFER (*):  16.2 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  16.24975 
PFER corresponds to signif. level 0.162 (without multiplicity adjustment)
> # medium PFER
> PFER <- 1
> (res <- stabsel_parameters(p = p, cutoff = cutoff, PFER = PFER, B = B,
+                            sampling.type = "SS", assumption = "r-concave"))
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 9; PFER (*):  0.908 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1 
PFER corresponds to signif. level 0.00908 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = cutoff, q = res$q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 9; PFER (*):  0.908 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.9077127 
PFER corresponds to signif. level 0.00908 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = cutoff, q = res$q + 1, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.6; q: 10; PFER (*):  1.14 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1.141338 
PFER corresponds to signif. level 0.0114 (without multiplicity adjustment)
> 
> 
> q <- 10
> # high PFER
> PFER <- 5
> (res <- stabsel_parameters(p = p, q = q, PFER = PFER, B = B,
+                            sampling.type = "SS", assumption = "r-concave"))
Stability selection with r-concavity assumption

Cutoff: 0.5; q: 10; PFER (*):  2.48 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  5 
PFER corresponds to signif. level 0.0248 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = res$cutoff, q = q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.5; q: 10; PFER (*):  2.48 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  2.484542 
PFER corresponds to signif. level 0.0248 (without multiplicity adjustment)
> # low PFER
> PFER <- 0.001
> (res <- stabsel_parameters(p = p, q = q, PFER = PFER, B = B,
+                            sampling.type = "SS", assumption = "r-concave"))
Stability selection with r-concavity assumption

Cutoff: 1; q: 10; PFER (*):  0.00518 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.001 
PFER corresponds to signif. level 5.18e-05 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = res$cutoff, q = q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 1; q: 10; PFER (*):  0.00518 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.005184816 
PFER corresponds to signif. level 5.18e-05 (without multiplicity adjustment)
> # medium PFER
> PFER <- 1
> (res <- stabsel_parameters(p = p, q = q, PFER = PFER, B = B,
+                            sampling.type = "SS", assumption = "r-concave"))
Stability selection with r-concavity assumption

Cutoff: 0.62; q: 10; PFER (*):  0.897 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1 
PFER corresponds to signif. level 0.00897 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = res$cutoff, q = q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.62; q: 10; PFER (*):  0.897 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  0.8971682 
PFER corresponds to signif. level 0.00897 (without multiplicity adjustment)
> stabsel_parameters(p = p, cutoff = res$cutoff - 0.01, q = q, B = B,
+                    sampling.type = "SS", assumption = "r-concave")
Stability selection with r-concavity assumption

Cutoff: 0.61; q: 10; PFER (*):  1.01 
   (*) or expected number of low selection probability variables
PFER (specified upper bound):  1.005863 
PFER corresponds to signif. level 0.0101 (without multiplicity adjustment)
> 
> proc.time()
   user  system elapsed 
  10.20    0.15   10.34 
