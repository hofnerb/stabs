
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "stabs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "stabs-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('stabs')
Loading required package: parallel
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fitfuns")
> ### * fitfuns
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Fitting Functions
> ### Title: Fit Functions for Stability Selection
> ### Aliases: fitfun fitfuns glmnet.lasso glmnet.lasso_maxCoef lars.lasso
> ###   lars.stepwise
> ### Keywords: models nonlinear nonparametric
> 
> ### ** Examples
> 
>   if (require("TH.data")) {
+       ## make data set available
+       data("bodyfat", package = "TH.data")
+   } else {
+       ## simulate some data if TH.data not available. 
+       ## Note that results are non-sense with this data.
+       bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)
+   }
Loading required package: TH.data
Loading required package: survival
Loading required package: MASS

Attaching package: 'TH.data'

The following object is masked from 'package:MASS':

    geyser

>   
>   if (require("lars")) {
+       ## selected variables
+       lars.lasso(bodyfat[, -2], bodyfat[,2], q = 3)$selected
+       lars.stepwise(bodyfat[, -2], bodyfat[,2], q = 3)$selected
+   }
Loading required package: lars
Loaded lars 1.2

Note: 'x' is coerced to a model matrix without intercept
Note: 'x' is coerced to a model matrix without intercept
         age    waistcirc      hipcirc elbowbreadth  kneebreadth     anthro3a 
       FALSE        FALSE         TRUE        FALSE         TRUE        FALSE 
    anthro3b     anthro3c      anthro4 
        TRUE        FALSE        FALSE 
>   
>   if (require("glmnet")) {
+       glmnet.lasso(bodyfat[, -2], bodyfat[,2], q = 3)$selected
+       ## selection path
+       glmnet.lasso(bodyfat[, -2], bodyfat[,2], q = 3)$path
+   
+       ## Using the anticonservative glmnet.lasso (see args.fitfun):
+       stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                              fitfun = glmnet.lasso, 
+                              args.fitfun = list(type = "anticonservative"), 
+                              cutoff = 0.75, PFER = 1)
+   }
Loading required package: glmnet
Loading required package: Matrix
Loaded glmnet 4.1
Note: 'x' is coerced to a model matrix without intercept
Note: 'x' is coerced to a model matrix without intercept
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitfuns", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:glmnet', 'package:Matrix', 'package:lars',
  'package:TH.data', 'package:MASS', 'package:survival'

> nameEx("plot")
> ### * plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.stabsel
> ### Title: Plot and Print Methods for Stability Selection
> ### Aliases: plot plot.stabsel print.stabsel
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   if (require("TH.data")) {
+       ## make data set available
+       data("bodyfat", package = "TH.data")
+   } else {
+       ## simulate some data if TH.data not available. 
+       ## Note that results are non-sense with this data.
+       bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)
+   }
Loading required package: TH.data
Loading required package: survival
Loading required package: MASS

Attaching package: 'TH.data'

The following object is masked from 'package:MASS':

    geyser

>   
>   ## set seed
>   set.seed(1234)
> 
>   ####################################################################
>   ### using stability selection with Lasso methods:
> 
>   if (require("lars")) {
+       (stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                              fitfun = lars.lasso, cutoff = 0.75,
+                              PFER = 1))
+       par(mfrow = c(2, 1))
+       plot(stab.lasso, ymargin = 6)
+       opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
+       plot(stab.lasso, type = "paths")
+   }
Loading required package: lars
Loaded lars 1.2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching 'package:lars', 'package:TH.data', 'package:MASS',
  'package:survival'

> nameEx("stabsel")
> ### * stabsel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: stabsel
> ### Title: Stability Selection
> ### Aliases: stabsel stabsel.matrix stabsel.data.frame
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   
>   if (require("TH.data")) {
+       ## make data set available
+       data("bodyfat", package = "TH.data")
+   } else {
+       ## simulate some data if TH.data not available. 
+       ## Note that results are non-sense with this data.
+       bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)
+   }
Loading required package: TH.data
Loading required package: survival
Loading required package: MASS

Attaching package: 'TH.data'

The following object is masked from 'package:MASS':

    geyser

>   
>   ## set seed
>   set.seed(1234)
>   
>   ####################################################################
>   ### using stability selection with Lasso methods:
> 
>   if (require("lars")) {
+       (stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                              fitfun = lars.lasso, cutoff = 0.75,
+                              PFER = 1))
+       (stab.stepwise <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                                 fitfun = lars.stepwise, cutoff = 0.75,
+                                 PFER = 1))
+       par(mfrow = c(2, 1))
+       plot(stab.lasso, main = "Lasso")
+       plot(stab.stepwise, main = "Stepwise Selection")
+       ## --> stepwise selection seems to be quite unstable even in this low
+       ##     dimensional example!
+   }
Loading required package: lars
Loaded lars 1.2

> 
>   ## set seed (again to make results comparable)
>   set.seed(1234)
>   if (require("glmnet")) {
+       (stab.glmnet <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                               fitfun = glmnet.lasso, cutoff = 0.75,
+                               PFER = 1))
+       par(mfrow = c(2, 1))
+       plot(stab.glmnet, main = "Lasso (glmnet)")
+       if (exists("stab.lasso"))
+           plot(stab.lasso, main = "Lasso (lars)")    
+   }
Loading required package: glmnet
Loading required package: Matrix
Loaded glmnet 4.1
>   
>   
>   ## Select variables with maximum coefficients based on lasso estimate
>   
>   set.seed(1234) # reset seed
>   if (require("glmnet")) {
+       ## use cross-validated lambda 
+       lambda.min <- cv.glmnet(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2])$lambda.min
+       (stab.maxCoef <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                                fitfun = glmnet.lasso_maxCoef, 
+                                # specify additional parameters to fitfun
+                                args.fitfun = list(lambda = lambda.min),
+                                cutoff = 0.75, PFER = 1))
+                                
+       ## WARNING: Using a fixed penalty (lambda) is usually not permitted and 
+       ##          not sensible. See ?fitfun for details.
+       
+       ## now compare standard lasso with "maximal parameter estimates" from lasso
+       par(mfrow = c(2, 1))
+       plot(stab.maxCoef, main = "Lasso (glmnet; Maximum Coefficients)")
+       plot(stab.glmnet, main = "Lasso (glmnet)")
+       ## --> very different results.
+   }
> 
>   ####################################################################
>   ### using stability selection directly on computed boosting models
>   ### from mboost
> 
> 
>   if (require("mboost")) {
+       ### low-dimensional example
+       mod <- glmboost(DEXfat ~ ., data = bodyfat)
+ 
+       ## compute cutoff ahead of running stabsel to see if it is a sensible
+       ## parameter choice.
+       ##   p = ncol(bodyfat) - 1 (= Outcome) + 1 ( = Intercept)
+       stabsel_parameters(q = 3, PFER = 1, p = ncol(bodyfat) - 1 + 1,
+                          sampling.type = "MB")
+       ## the same:
+       stabsel(mod, q = 3, PFER = 1, sampling.type = "MB", eval = FALSE)
+ 
+       ## No test: 
+ ### Do not test the following code per default on CRAN as it takes some time to run:
+       ## now run stability selection
+       (sbody <- stabsel(mod, q = 3, PFER = 1, sampling.type = "MB"))
+       opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
+       plot(sbody)
+       par(opar)
+       plot(sbody, type = "maxsel", ymargin = 6)
+       
+ ## End(No test)
+   }
Loading required package: mboost

Attaching package: 'mboost'

The following object is masked from 'package:glmnet':

    Cindex

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("stabsel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching 'package:mboost', 'package:glmnet', 'package:Matrix',
  'package:lars', 'package:TH.data', 'package:MASS', 'package:survival'

> nameEx("stabsel_stabsel")
> ### * stabsel_stabsel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: stabsel.stabsel
> ### Title: Change Parameters of Stability Selection
> ### Aliases: stabsel.stabsel
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   if (require("TH.data")) {
+       ## make data set available
+       data("bodyfat", package = "TH.data")
+   } else {
+       ## simulate some data if TH.data not available. 
+       ## Note that results are non-sense with this data.
+       bodyfat <- matrix(rnorm(720), nrow = 72, ncol = 10)
+   }
Loading required package: TH.data
Loading required package: survival
Loading required package: MASS

Attaching package: 'TH.data'

The following object is masked from 'package:MASS':

    geyser

>   
>   ## set seed
>   set.seed(1234)
> 
>   ####################################################################
>   ### using stability selection with Lasso methods:
> 
>   if (require("lars")) {
+       (stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                              fitfun = lars.lasso, cutoff = 0.75,
+                              PFER = 1))
+ 
+       par(mfrow = c(2, 1))
+       plot(stab.lasso)
+ 
+       ## now change the PFER and the assumption:
+       (stab.lasso_cf0.93_rconc <- stabsel(stab.lasso, cutoff = 0.93,
+                                           assumption = "r-concave"))
+       plot(stab.lasso_cf0.93_rconc)
+       ## the cutoff did change and hence the PFER and the selected
+       ## variables
+   }
Loading required package: lars
Loaded lars 1.2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("stabsel_stabsel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching 'package:lars', 'package:TH.data', 'package:MASS',
  'package:survival'

> nameEx("subsample")
> ### * subsample
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subsample
> ### Title: Draw Random Subsamples
> ### Aliases: subsample
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   ## just a low-dimensional example
>   subsample(weights = rep(1, 10), B = 50)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    1    0    1    0    0    1    1    0     1     0     0     1
 [2,]    0    0    1    0    1    1    0    1    0     0     0     0     0
 [3,]    0    1    1    1    1    1    0    1    1     1     1     1     0
 [4,]    1    0    0    1    0    1    1    0    0     0     0     0     1
 [5,]    0    0    1    0    0    1    1    1    1     1     1     1     1
 [6,]    1    0    0    0    1    0    0    0    0     1     1     0     0
 [7,]    1    0    0    0    0    1    1    0    1     1     0     1     0
 [8,]    1    1    1    1    0    0    0    0    0     0     1     1     0
 [9,]    0    1    1    1    1    0    1    1    1     0     0     1     1
[10,]    0    1    0    0    1    0    0    0    1     0     1     0     1
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
 [1,]     1     0     0     0     0     0     0     1     0     1     0     1
 [2,]     0     1     0     0     1     1     0     0     0     1     1     1
 [3,]     1     0     0     1     1     1     0     1     1     0     1     0
 [4,]     0     1     1     1     1     0     1     1     0     0     0     0
 [5,]     1     1     0     0     0     1     0     0     1     1     0     0
 [6,]     1     1     0     1     0     1     1     0     1     0     1     0
 [7,]     0     0     1     1     0     0     1     1     0     1     0     1
 [8,]     0     1     1     0     1     0     0     0     1     0     0     0
 [9,]     1     0     1     0     0     1     1     1     0     1     1     1
[10,]     0     0     1     1     1     0     1     0     1     0     1     1
      [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
 [1,]     0     0     0     1     0     0     1     1     0     0     1     0
 [2,]     1     1     1     0     1     0     0     0     1     1     0     1
 [3,]     0     0     1     0     0     1     0     1     0     1     1     1
 [4,]     0     1     1     0     1     0     1     1     1     0     0     0
 [5,]     1     1     0     1     1     0     1     1     1     0     1     0
 [6,]     1     1     0     1     0     1     0     1     1     0     0     0
 [7,]     1     1     0     1     1     1     0     0     0     0     1     1
 [8,]     0     0     0     1     1     1     1     0     0     1     0     1
 [9,]     1     0     1     0     0     0     0     0     1     1     0     1
[10,]     0     0     1     0     0     1     1     0     0     1     1     0
      [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]
 [1,]     0     1     0     1     1     0     1     1     1     0     1     1
 [2,]     1     1     1     0     0     0     1     1     0     1     0     0
 [3,]     1     0     1     1     0     1     1     1     0     0     1     0
 [4,]     0     1     1     0     1     0     0     0     1     1     0     1
 [5,]     0     0     1     0     1     1     0     1     1     0     0     1
 [6,]     1     0     1     0     0     1     1     0     1     1     1     1
 [7,]     0     0     0     0     0     0     0     1     0     0     0     0
 [8,]     1     1     0     1     0     1     0     0     0     1     1     0
 [9,]     0     0     0     1     1     1     0     0     1     0     1     1
[10,]     1     1     0     1     1     0     1     0     0     1     0     0
      [,50]
 [1,]     0
 [2,]     1
 [3,]     1
 [4,]     1
 [5,]     0
 [6,]     0
 [7,]     0
 [8,]     1
 [9,]     0
[10,]     1
attr(,"type")
[1] "50-fold subsampling"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subsample", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.19 0.16 3.39 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
