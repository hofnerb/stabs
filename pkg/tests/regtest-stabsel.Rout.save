
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("stabs")
Loading required package: parallel
> library("mboost")
This is mboost 2.4-0. See 'package?mboost' and the NEWS file
for a complete list of changes.

> library("glmnet")
Loading required package: Matrix
Loaded glmnet 1.9-8

> library("lars")
Loaded lars 1.2

> library("TH.data")
> 
> ## load data set
> data("bodyfat", package = "TH.data")
> ## and set seed
> set.seed(1234)
> 
> ################################################################################
> ### stabsel with mboost
> mod <- glmboost(DEXfat ~ ., data = bodyfat)
> 
> ## compute cutoff ahead of running stabsel to see if it is a sensible
> ## parameter choice.
> ##   p = ncol(bodyfat) - 1 (= Outcome) + 1 ( = Intercept)
> stabsel_parameters(q = 3, PFER = 1, p = ncol(bodyfat) - 1 + 1,
+                    sampling.type = "MB")
Stability Selection without further assumptions
Cutoff: 0.95; q: 3; PFER:  1 
> ## the same:
> stabsel_parameters(mod, q = 3, PFER = 1, sampling.type = "MB")
Stability Selection without further assumptions
Cutoff: 0.95; q: 3; PFER:  1 
> ## the same:
> stabsel(mod, q = 3, PFER = 1, sampling.type = "MB", eval = FALSE)
Stability Selection without further assumptions
Cutoff: 0.95; q: 3; PFER:  1 
> 
> ## now run stability selection
> (sbody <- stabsel(mod, q = 3, PFER = 1, sampling.type = "MB"))
	Stability Selection without further assumptions

Selected base-learners:
waistcirc   hipcirc 
        3         4 

Selection probabilities:
 (Intercept)          age elbowbreadth  kneebreadth     anthro3c     anthro3b 
        0.00         0.00         0.00         0.02         0.10         0.11 
     anthro4     anthro3a    waistcirc      hipcirc 
        0.12         0.66         0.99         1.00 

Cutoff: 0.95; q: 3; PFER:  1 

> opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
> plot(sbody, type = "paths", ymargin = 6)
> par(opar)
> plot(sbody)
> 
> ################################################################################
> ### run stability selection with lasso (from glmnet)
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 cutoff = 0.75, PFER = 1, fitfun = glmnet.lasso)
> stab
	Stability Selection with unimodality assumption

Selected base-learners:
waistcirc   hipcirc 
        2         3 

Selection probabilities:
         age elbowbreadth  kneebreadth     anthro3b      anthro4     anthro3c 
        0.00         0.00         0.00         0.09         0.09         0.11 
    anthro3a    waistcirc      hipcirc 
        0.33         0.94         0.97 

Cutoff: 0.75; q: 2; PFER(*):  0.454 
   (*) or expected number of low selection probability variables

> plot(stab, type = "maxsel")
> plot(stab, type = "paths")
> 
> ### compare results with hdi
> if (require("hdi")) {
+     stab_hdi <- stability(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                           EV = 1, threshold = 0.75)
+     stab_hdi
+     sort(stab_hdi$freq)
+ }
Loading required package: hdi
Loading required package: linprog
Loading required package: lpSolve
Loading required package: MASS
Loading required package: scalreg
         age elbowbreadth  kneebreadth      anthro4     anthro3c     anthro3b 
        0.00         0.00         0.02         0.10         0.11         0.13 
    anthro3a    waistcirc      hipcirc 
        0.60         0.98         1.00 
> 
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 cutoff = 0.75, PFER = 1, sampling.type = "MB",
+                 fitfun = glmnet.lasso)
> stab
	Stability Selection without further assumptions

Selected base-learners:
waistcirc   hipcirc 
        2         3 

Selection probabilities:
         age elbowbreadth  kneebreadth     anthro3b     anthro3c      anthro4 
        0.00         0.00         0.02         0.06         0.06         0.09 
    anthro3a    waistcirc      hipcirc 
        0.38         0.90         0.95 

Cutoff: 0.75; q: 2; PFER:  0.889 

> plot(stab, type = "path")
> plot(stab, type = "maxsel")
> 
> ################################################################################
> ### with package lars
> set.seed(1234)
> stab.stepwise <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                          fitfun = lars.stepwise,
+                          cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stab.stepwise
	Stability Selection without further assumptions

No base-learner selected

Selection probabilities:
         age elbowbreadth  kneebreadth     anthro3c      anthro4     anthro3a 
        0.00         0.00         0.03         0.07         0.11         0.14 
   waistcirc      hipcirc     anthro3b 
        0.47         0.55         0.63 

Cutoff: 0.75; q: 2; PFER:  0.889 

> plot(stab.stepwise, type = "maxsel")
> 
> set.seed(1234)
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 fitfun = lars.lasso,
+                 cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stab
	Stability Selection without further assumptions

Selected base-learners:
waistcirc   hipcirc 
        2         3 

Selection probabilities:
         age elbowbreadth  kneebreadth     anthro3b     anthro3c      anthro4 
        0.00         0.00         0.00         0.01         0.01         0.03 
    anthro3a    waistcirc      hipcirc 
        0.11         0.92         0.92 

Cutoff: 0.75; q: 2; PFER:  0.889 

> plot(stab, type = "maxsel")
> 
> ## check data.frame interface
> set.seed(1234)
> stab.df <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                    fitfun = lars.lasso,
+                    cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stab.df
	Stability Selection without further assumptions

Selected base-learners:
waistcirc   hipcirc 
        2         3 

Selection probabilities:
         age elbowbreadth  kneebreadth     anthro3b     anthro3c      anthro4 
        0.00         0.00         0.00         0.01         0.01         0.03 
    anthro3a    waistcirc      hipcirc 
        0.11         0.92         0.92 

Cutoff: 0.75; q: 2; PFER:  0.889 

> stopifnot(all.equal(stab$max, stab.df$max))
> ## and with explicit intercept?
> set.seed(1234)
> stab.int <- stabsel(x = bodyfat[, -2], y = bodyfat[,2], intercept = TRUE,
+                     fitfun = lars.lasso,
+                     cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stab.int
	Stability Selection without further assumptions

Selected base-learners:
waistcirc   hipcirc 
        3         4 

Selection probabilities:
 (Intercept)          age elbowbreadth  kneebreadth     anthro3b     anthro3c 
        0.00         0.00         0.00         0.00         0.01         0.01 
     anthro4     anthro3a    waistcirc      hipcirc 
        0.03         0.11         0.92         0.92 

Cutoff: 0.75; q: 2; PFER:  0.8 

> stopifnot(all.equal(stab$max, stab.int$max[-1]))
> 
> ################################################################################
> ### use args.fitfun
> set.seed(1234)
> stab.args <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                      fitfun = lars.lasso,
+                      args.fitfun = list(type = "stepwise"),
+                      cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stab.args
	Stability Selection without further assumptions

No base-learner selected

Selection probabilities:
         age elbowbreadth  kneebreadth     anthro3c      anthro4     anthro3a 
        0.00         0.00         0.03         0.07         0.11         0.14 
   waistcirc      hipcirc     anthro3b 
        0.47         0.55         0.63 

Cutoff: 0.75; q: 2; PFER:  0.889 

> stopifnot(all.equal(stab.stepwise$max, stab.args$max))
> 
> ################################################################################
> ### get length of formula
> 
> fm <- DEXfat ~ bbs(age) + bbs(waistcirc) + bols(hipcirc) + bols(elbowbreath)
> length(strsplit(deparse(fm), " \\+ ")[[1]])
[1] 4
> 
> ## now this depends on the data...
> fm <- DEXfat ~ .
> length(strsplit(deparse(fm), " \\+ ")[[1]])
[1] 1
> 
> 
> ################################################################################
> 
> ### check if phat and max are OK
> 
> ### lasso (from glmnet)
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 cutoff = 0.75, PFER = 1, fitfun = glmnet.lasso)
> stopifnot(all.equal(stab$max, stab$phat[, ncol(stab$phat)]))
> 
> ### mboost
> stab <- stabsel(mod, q = 3, PFER = 1, sampling.type = "MB")
> stopifnot(all.equal(stab$max, stab$phat[, ncol(stab$phat)]))
> 
> ### lasso (from lars)
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 fitfun = lars.lasso,
+                 cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stopifnot(all.equal(stab$max, stab$phat[, ncol(stab$phat)]))
> 
> ### stepwise (from lars)
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 fitfun = lars.stepwise,
+                 cutoff = 0.75, PFER = 1, sampling.type = "MB")
> stopifnot(all.equal(stab$max, stab$phat[, ncol(stab$phat)]))
> 
> ## what if phat is not available?
> lars.lasso2 <- function(x, y, q, ...) {
+     if (!require("lars"))
+         stop("Package ", sQuote("lars"), " needed but not available")
+ 
+     if (is.data.frame(x)) {
+         message("Note: ", sQuote("x"),
+                 " is coerced to a model matrix without intercept")
+         x <- model.matrix(~ . - 1, x)
+     }
+ 
+     ## fit model
+     fit <- lars::lars(x, y, max.steps = q, ...)
+ 
+     ## which coefficients are non-zero?
+     selected <- unlist(fit$actions)
+     ret <- logical(ncol(x))
+     ret[selected] <- TRUE
+     names(ret) <- colnames(x)
+     ## return both
+     return(list(selected = ret))
+ }
> stab <- stabsel(x = as.matrix(bodyfat[, -2]), y = bodyfat[,2],
+                 fitfun = lars.lasso2,
+                 cutoff = 0.75, PFER = 1, sampling.type = "MB")
> plot(stab, type = "paths")
Warning message:
In plot.stabsel(stab, type = "paths") :
  Stability paths 'x$phat' are missing, plot maximum selection frequency instead
> ## works.
> 
> proc.time()
   user  system elapsed 
  8.489   0.794   6.619 
