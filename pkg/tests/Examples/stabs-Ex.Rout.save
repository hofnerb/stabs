
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "stabs"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "stabs-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('stabs')
Loading required package: parallel
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fitfuns")
> ### * fitfuns
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Fitting Functions
> ### Title: Fit Functions for Stability Selection
> ### Aliases: fitfun fitfuns glmnet.lasso glmnet.lasso_maxCoef lars.lasso
> ###   lars.stepwise
> ### Keywords: models nonlinear nonparametric
> 
> ### ** Examples
> 
> data("bodyfat", package = "TH.data")
> ## selected variables
> lars.lasso(bodyfat[, -2], bodyfat[,2], q = 3)$selected
Loading required package: lars
Loaded lars 1.2

Note: ‘x’ is coerced to a model matrix without intercept
         age    waistcirc      hipcirc elbowbreadth  kneebreadth     anthro3a 
       FALSE         TRUE         TRUE        FALSE        FALSE         TRUE 
    anthro3b     anthro3c      anthro4 
       FALSE        FALSE        FALSE 
> lars.stepwise(bodyfat[, -2], bodyfat[,2], q = 3)$selected
Note: ‘x’ is coerced to a model matrix without intercept
         age    waistcirc      hipcirc elbowbreadth  kneebreadth     anthro3a 
       FALSE        FALSE         TRUE        FALSE         TRUE        FALSE 
    anthro3b     anthro3c      anthro4 
        TRUE        FALSE        FALSE 
> glmnet.lasso(bodyfat[, -2], bodyfat[,2], q = 3)$selected
Loading required package: glmnet
Loading required package: Matrix
Loaded glmnet 1.9-8

Note: ‘x’ is coerced to a model matrix without intercept
         age    waistcirc      hipcirc elbowbreadth  kneebreadth     anthro3a 
       FALSE         TRUE         TRUE        FALSE        FALSE         TRUE 
    anthro3b     anthro3c      anthro4 
       FALSE        FALSE        FALSE 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitfuns", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:glmnet’, ‘package:Matrix’, ‘package:lars’

> nameEx("plot")
> ### * plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.stabsel
> ### Title: Plot and Print Methods for Stability Selection
> ### Aliases: plot plot.stabsel print.stabsel
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   data("bodyfat", package = "TH.data")
>   ## set seed
>   set.seed(1234)
> 
>   ####################################################################
>   ### using stability selection with Lasso methods:
> 
>   if (require("lars")) {
+       (stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                              fitfun = lars.lasso, cutoff = 0.75,
+                              PFER = 1))
+       par(mfrow = c(2, 1))
+       plot(stab.lasso, ymargin = 6)
+       opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
+       plot(stab.lasso, type = "paths")
+   }
Loading required package: lars
Loaded lars 1.2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:lars’

> nameEx("stabsel")
> ### * stabsel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: stabsel
> ### Title: Stability Selection
> ### Aliases: stabsel stabsel.matrix stabsel.data.frame
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   ## make data set available
>   data("bodyfat", package = "TH.data")
>   ## set seed
>   set.seed(1234)
> 
>   ####################################################################
>   ### using stability selection with Lasso methods:
> 
>   if (require("lars")) {
+       (stab.lasso <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                              fitfun = lars.lasso, cutoff = 0.75,
+                              PFER = 1))
+       (stab.stepwise <- stabsel(x = bodyfat[, -2], y = bodyfat[,2],
+                                 fitfun = lars.stepwise, cutoff = 0.75,
+                                 PFER = 1))
+       par(mfrow = c(2, 1))
+       plot(stab.lasso, main = "Lasso")
+       plot(stab.stepwise, main = "Stepwise Selection")
+       ## --> stepwise selection seems to be quite unstable even in this low
+       ##     dimensional example!
+   }
Loading required package: lars
Loaded lars 1.2

> 
>   ####################################################################
>   ### using stability selection directly on computed boosting models
>   ### from mboost
> 
>   if (require("mboost")) {
+       ### low-dimensional example
+       mod <- glmboost(DEXfat ~ ., data = bodyfat)
+ 
+       ## compute cutoff ahead of running stabsel to see if it is a sensible
+       ## parameter choice.
+       ##   p = ncol(bodyfat) - 1 (= Outcome) + 1 ( = Intercept)
+       stabsel_parameters(q = 3, PFER = 1, p = ncol(bodyfat) - 1 + 1,
+                          sampling.type = "MB")
+       ## the same:
+       stabsel(mod, q = 3, PFER = 1, sampling.type = "MB", eval = FALSE)
+ 
+       ## now run stability selection
+       (sbody <- stabsel(mod, q = 3, PFER = 1, sampling.type = "MB"))
+       opar <- par(mai = par("mai") * c(1, 1, 1, 2.7))
+       plot(sbody)
+       par(opar)
+ 
+       plot(sbody, type = "maxsel", ymargin = 6)
+   }
Loading required package: mboost
This is mboost 2.4-1. See ‘package?mboost’ and the NEWS file
for a complete list of changes.

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("stabsel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:mboost’, ‘package:lars’

> nameEx("subsample")
> ### * subsample
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subsample
> ### Title: Draw Random Subsamples
> ### Aliases: subsample
> ### Keywords: nonparametric
> 
> ### ** Examples
> 
>   ## just a low-dimensional example
>   subsample(weights = rep(1, 10), B = 50)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    1    1    1    1    1    0    0    0     0     0     1     0
 [2,]    1    1    1    1    0    1    0    1    1     0     0     1     1
 [3,]    0    1    0    0    0    1    1    0    1     1     1     0     1
 [4,]    0    0    1    1    1    0    1    1    1     0     1     0     1
 [5,]    0    1    1    0    1    0    0    0    0     1     0     0     0
 [6,]    1    0    0    1    0    0    0    1    1     1     1     1     1
 [7,]    0    0    0    1    1    1    0    1    1     0     0     1     0
 [8,]    1    0    0    0    0    1    1    0    0     1     0     0     0
 [9,]    1    1    0    0    0    0    1    1    0     1     1     0     0
[10,]    0    0    1    0    1    0    1    0    0     0     1     1     1
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
 [1,]     0     0     0     1     0     0     0     1     0     1     1     0
 [2,]     1     0     1     0     1     1     1     1     0     1     1     0
 [3,]     1     1     0     1     0     0     1     1     1     1     1     1
 [4,]     1     0     1     1     1     1     0     1     0     1     1     0
 [5,]     1     0     0     0     1     1     0     0     1     1     0     1
 [6,]     0     0     1     0     0     1     1     0     1     0     0     1
 [7,]     0     1     1     1     1     0     0     0     0     0     0     1
 [8,]     0     1     0     0     0     1     0     0     0     0     1     1
 [9,]     0     1     0     1     0     0     1     1     1     0     0     0
[10,]     1     1     1     0     1     0     1     0     1     0     0     0
      [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
 [1,]     0     0     1     1     1     0     0     0     0     1     0     0
 [2,]     1     1     1     0     0     1     0     1     0     1     0     0
 [3,]     1     0     1     0     1     0     0     0     1     0     1     1
 [4,]     0     0     1     1     0     0     1     1     0     1     1     0
 [5,]     0     1     0     1     1     0     1     0     0     0     1     1
 [6,]     1     0     0     1     1     1     0     0     1     1     1     1
 [7,]     1     0     1     0     0     0     1     0     0     0     0     0
 [8,]     0     1     0     1     0     1     1     1     1     0     1     1
 [9,]     0     1     0     0     1     1     1     1     1     0     0     1
[10,]     1     1     0     0     0     1     0     1     1     1     0     0
      [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]
 [1,]     0     1     1     0     0     1     0     1     1     1     0     0
 [2,]     1     0     0     1     0     0     0     1     1     0     0     0
 [3,]     0     1     0     0     1     0     0     0     1     1     1     0
 [4,]     1     0     0     1     0     0     1     0     0     1     0     0
 [5,]     1     1     1     1     1     1     0     0     0     0     1     1
 [6,]     0     0     1     0     1     1     1     1     1     1     1     1
 [7,]     1     1     1     0     0     1     0     0     0     0     1     0
 [8,]     1     0     1     0     0     1     1     1     0     1     1     1
 [9,]     0     1     0     1     1     0     1     1     0     0     0     1
[10,]     0     0     0     1     1     0     1     0     1     0     0     1
      [,50]
 [1,]     1
 [2,]     1
 [3,]     1
 [4,]     1
 [5,]     0
 [6,]     0
 [7,]     1
 [8,]     0
 [9,]     0
[10,]     0
attr(,"type")
[1] "50-fold subsampling"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subsample", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.07 0.092 3.44 1.089 0.149 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
